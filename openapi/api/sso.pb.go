// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/openapi/api/sso.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TokenType int32

const (
	TokenType_TokenTypeUnknow TokenType = 0
	TokenType_Oauth           TokenType = 1
	TokenType_ApiKey          TokenType = 2
)

var TokenType_name = map[int32]string{
	0: "TokenTypeUnknow",
	1: "Oauth",
	2: "ApiKey",
}

var TokenType_value = map[string]int32{
	"TokenTypeUnknow": 0,
	"Oauth":           1,
	"ApiKey":          2,
}

func (x TokenType) String() string {
	return proto.EnumName(TokenType_name, int32(x))
}

func (TokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cfb8356f7149fb0, []int{0}
}

type AclType int32

const (
	AclType_Unknow  AclType = 0
	AclType_Ip      AclType = 1
	AclType_Service AclType = 2
)

var AclType_name = map[int32]string{
	0: "Unknow",
	1: "Ip",
	2: "Service",
}

var AclType_value = map[string]int32{
	"Unknow":  0,
	"Ip":      1,
	"Service": 2,
}

func (x AclType) String() string {
	return proto.EnumName(AclType_name, int32(x))
}

func (AclType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cfb8356f7149fb0, []int{1}
}

func init() {
	proto.RegisterEnum("sso.TokenType", TokenType_name, TokenType_value)
	proto.RegisterEnum("sso.AclType", AclType_name, AclType_value)
}

func init() { proto.RegisterFile("common/openapi/api/sso.proto", fileDescriptor_7cfb8356f7149fb0) }

var fileDescriptor_7cfb8356f7149fb0 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xce, 0x31, 0x8f, 0x82, 0x40,
	0x10, 0x05, 0xe0, 0x83, 0xcb, 0x2d, 0x61, 0xae, 0xb8, 0xcd, 0x5e, 0xeb, 0x2f, 0xa0, 0x60, 0x63,
	0x2c, 0xac, 0xb1, 0x33, 0x16, 0x16, 0x62, 0x63, 0x07, 0x64, 0x84, 0x0d, 0xb0, 0x33, 0x61, 0x17,
	0x08, 0xff, 0xde, 0x48, 0x41, 0x63, 0xf1, 0x8a, 0x97, 0xbc, 0x97, 0x7c, 0xb0, 0xab, 0xa8, 0xef,
	0xc9, 0x6a, 0x62, 0xb4, 0x05, 0x1b, 0xfd, 0x8e, 0x73, 0x94, 0xf2, 0x40, 0x9e, 0xd4, 0xb7, 0x73,
	0x94, 0x1c, 0x21, 0xce, 0xa9, 0x45, 0x9b, 0x2f, 0x8c, 0xea, 0x1f, 0xfe, 0xb6, 0x72, 0xb7, 0xad,
	0xa5, 0x59, 0x7e, 0xa9, 0x18, 0x7e, 0xae, 0xc5, 0xe8, 0x1b, 0x19, 0x28, 0x00, 0x91, 0xb1, 0xb9,
	0xe0, 0x22, 0xc3, 0x24, 0x81, 0x28, 0xab, 0xba, 0xf5, 0x06, 0x20, 0xb6, 0xb5, 0x80, 0xf0, 0xcc,
	0x32, 0x50, 0xbf, 0x10, 0xdd, 0x70, 0x98, 0x4c, 0x85, 0x32, 0x3c, 0xed, 0x1f, 0xba, 0x36, 0xbe,
	0x19, 0xcb, 0xf4, 0x39, 0x20, 0xce, 0x0d, 0x62, 0x97, 0xfa, 0x49, 0x23, 0xeb, 0x9a, 0x5a, 0xe3,
	0xf5, 0x27, 0xb3, 0x14, 0xab, 0xf1, 0xf0, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x71, 0x28, 0x31, 0xdc,
	0xc3, 0x00, 0x00, 0x00,
}
